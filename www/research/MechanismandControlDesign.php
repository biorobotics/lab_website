<?php include $_SERVER['DOCUMENT_ROOT'].'/phpincludes/header.php'; ?>

<!-- Basic Page Needs - Edit keywords and page title here
============================= -->
	<title>Mechanism and Control Design - Biorobotics</title>
	<meta name="Keywords" content="Carnegie Mellon University, robotics, Modular Robotics">
	<meta name="description" content ="Mechanism and Control Design - Carnegie Mellon Biorobotics" /><!-- Banner and Menu - Do not change
============================= -->
<?php include $_SERVER['DOCUMENT_ROOT']."/phpincludes/banner.php";?>

<!-- Content - Add content for your page here
============================= -->
    
	<div class="row"><h3 class="c20" id="h.rgf4mdsiaol6"><span>Modular Robotics</b> - Mechanism and Control Design</span></h3><p class="c73"><b><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 248.50px; height: 208.46px;"><img alt="" src="images/MechanismandControlDesign/image86.png" style="width: 248.50px; height: 208.46px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span><span class="c11">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 215.00px; height: 228.00px;"><img alt="" src="images/MechanismandControlDesign/image79.png" style="width: 488.00px; height: 228.00px; margin-left: -123.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c73"><span class="c11">The Biorobotics group has embraced and advanced modular robot systems, first starting with our snake robots and now virtually all of our hardware and software systems. The obvious immediate benefit for </span><span class="c11 c38">modular robotic systems</span><span class="c16 c11">&nbsp;is that a core set of modules can be combined and recombined to form a customized robot, perhaps on a daily basis. They also allow for better serviceability of the robots because if a modular should fail, it simply needs to be replaced. We have discovered, in our work, that modularity also allows for rapid design of near-final systems, sometimes creating a tight design loop between the designer and the user. </span></p><p class="c71"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 624.00px; height: 353.33px;"><img alt="" src="images/MechanismandControlDesign/image41.png" style="width: 624.00px; height: 353.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c73"><span class="c16 c11">Our group&rsquo;s work toward modularity has taken a comprehensive view, ranging from low-level hardware and software support, to mid-level parameter estimation and control, and all the way to high-level artificial intelligence.Regardless of level or aspect of modularity development, scalability pervades all aspects of our research. Scalability can take on several forms; for example, the number of possible robot designs grows exponentially with the number of core modules (really modular types) in a given set of modules. The number of system level controllers, and the number of behaviors that depend on such controllers also grows exponentially, but even faster than the number of robot designs. </span></p><p class="c49"><span class="c16 c11">Questions this project asks: </span></p><ul class="c6 lst-kix_wg5geefdfisl-0 start"><li class="c49 c40 li-bullet-0"><span class="c16 c13 c46">What is in &ldquo;scope&rdquo; for the definition of a module? (I.e. Structure, power, actuation, sensing, computation, controller, and interfaces)</span></li><li class="c49 c40 li-bullet-0"><span class="c16 c46 c13">A small set of modules can be used to construct a large number of designs. Can one control architecture be applied to any and all of these designs at once?</span></li><li class="c49 c40 li-bullet-0"><span class="c16 c46 c13">Given a task, how can one determine the best robot design to achieve that task?</span></li><li class="c49 c40 li-bullet-0"><span class="c16 c46 c13">Given a range of tasks, how can one determine the set of modules whose combinations of modules form robots to achieve these tasks? How can one optimize the design of the individual modules within that set?</span></li></ul><p class="c49"><span class="c68 c13">Design Composition of Fixed Topology Modular Robots</span><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 558.50px; height: 287.31px;"><img alt="" src="images/MechanismandControlDesign/image57.png" style="width: 558.50px; height: 287.31px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c49"><span class="c5">An abstracted version of our pipeline assumes that the components used for composition can be represented as shown in the blue box. At each training iteration, a task is generated at random from a predefined distribution of tasks. The generator implicitly maps the task into a population of compositions, symbolized in the red box. The evolution-guided data creation step explores around the generated compositions by evolving them using a procedure inspired by Evolutionary Algorithms, and creates a population of evolved compositions, symbolized in the green box. The discriminator takes as input the task and a robot composition that is either from the generated compositions or the evolved compositions, and tries to distinguish from which population the composition comes from. The output of the discriminator feeds into the loss function &#x1d43f;&#x1d43a;, guiding the generator towards generating high-performing compositions.</span></p><p class="c49"><span class="c68 c13">Design Composition of Variable Topology Modular Robots (based on Robo-grammar)</span><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 611.00px; height: 345.00px;"><img alt="" src="images/MechanismandControlDesign/image99.png" style="width: 611.00px; height: 345.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c64 c80"><span class="c5">Our framework begins by collecting a dataset of robot designs based on a set of graph grammar rules, as shown on the top left. This process of enumerating designs is computationally inexpensive, as no controller is needed. The collected data (example on bottom left) is subsequently used to train a graph variational autoencoder (VAE), which defines a mapping between a low-dimensional continuous latent space and the combinatorial design space. A property predictor (shown as the green trapezoid) is simultaneously trained to predict the world space features &nbsp;grounding of the robots from the latent vector, in order to encourage physically similar robots to be grouped together in the latent space. After the VAE is trained, optimization can be performed in the latent space in search of high-performing designs. This VAE can further be used for multiple distinct tasks without the need for retraining.</span></p><p class="c49"><span class="c16 c11">Relevant publications:</span></p><ul class="c6 lst-kix_1nupw6mwm3tp-0 start"><li class="c73 c40 li-bullet-0"><span class="c16 c42 c13 c36">GLSO: Grammar-guided Latent Space Optimization for Sample-efficient Robot Design Automation, Jiaheng Hu, Julian Whitman, and Howie Choset, Conference on Robot Learning (CoRL), 2022 Paper</span></li><li class="c73 c40 li-bullet-0"><span class="c16 c42 c13 c36">Modular Robot Design Optimization with Generative Adversarial Networks, Jiaheng Hu, Julian Whitman, Matthew Travers, and Howie Choset International Conference on Robotics and Automation (ICRA), 2022 Paper</span></li><li class="c73 c40 li-bullet-0"><span class="c42 c13 c36">Whitman, J., Travers, M., &amp; Choset, H. Modular mobile robot design selection with deep reinforcement learning (2020). </span><span class="c85 c32 c42 c13 c36">Machine Learning for Engineering Modeling, Simulation and Design Workshop at Neural Information Processing Systems</span></li><li class="c40 c73 li-bullet-0"><span class="c42 c13 c36">Whitman, J., Bhirangi, R., Travers, M., &amp; Choset, H. (2020). Modular Robot Design Synthesis with Deep Reinforcement Learning. In </span><span class="c32 c42 c13 c36">Thirty-Fourth AAAI Conference on Artificial Intelligence</span><span class="c42 c13 c36">.</span></li><li class="c73 c40 li-bullet-0"><span class="c42 c13 c36">Whitman, J., &amp; Choset, H. (2018). Task-specific manipulator design and trajectory synthesis. </span><span class="c32 c42 c13 c36">IEEE Robotics and Automation Letters, 4</span><span class="c16 c42 c13 c36">(2), 301&ndash;308.</span></li><li class="c73 c40 li-bullet-0"><span class="c13 c36 c42">Whitman, J., Su, S., Coros, S., Ansari, A., &amp; Choset, H. (2017). Generating gaits for simultaneous locomotion and manipulation. In </span><span class="c32 c42 c13 c36 c85">2017 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)</span></li></ul><p class="c48"><span class="c85 c32 c42 c13 c36"></span></p><hr style="page-break-before:always;display:none;"><p class="c48"><span class="c38 c13 c36 c44"></span></p><!-- <div class="six columns">
			<h3><b>Modularity</b> - Modular manipulators</h3>
			<p>
				<b>Modular robotic systems</b> have the potential to be adapted to varying tasks using a single set of reconfigurable hardware, enabling customizable robots to be developed faster and more economically than conventional robots. Currently, even with the engineering experience, calculations and intuitions, it is not immediately evident how to construct and program a modular robot for a task. We research methods to automatically synthesize the design and controllers for modular robot arms.
			</p>
			<div class="eleven columns u-pull-left">
				<img src="images/Modularity/fig2.png" alt="ModularityF2" width="100%;" style="padding-left:1rem;">
				<p class="caption"> Figure2 : A prototype of a robot arm made from HEBI modular actuators.
				</p>
		</div>
		</div>
		<div class="five columns u-pull-right">
			<img src="images/Modularity/fig1.png" alt="ModularityF1" width="100%;" style="padding-left:1rem;">
			<p class="caption"> Figure 1:  Supernumerary arm implemented in hardware, reaching  one  of  the  targets  on  the  overhead  workpiece.  The  end
			effector  is  a  flat  rubberized  plate  with  spring-loaded  hinge.
			The  arm,  attached  to  a  backpack  control  and  power  pack,
			lends the user a helping hand
			</p>
		</div> -->
	</div>
<!-- Gallery - include if page has gallery elements
============================= -->
<?php include $_SERVER['DOCUMENT_ROOT']."/phpincludes/gallery.php";?>

<!-- Footer - Do not change
============================= -->
<?php include $_SERVER['DOCUMENT_ROOT']."/phpincludes/footer.php";?>